


Wave Document Model Implementation
----------------------------------



          
            (output sink)
           SilentOperationSink 
                     A
                     |
[IndexedDocument]    |             [MutableDocument (DocumentImpl)]
            \        |                /
             <--[OperationSequencer]-->         
              \                     /
             [PluggableMutableDocument]
                      |
                      |         
             [ObservablePluggableMutableDocument]
                      |
                      |
                [CcDataDocumentImpl]

          




IndexedDocument 
---------------

Is a: ReadableWDocument, TextNodeOrganiser,  SuperSink

Implemented in:  IndexedDocumentImpl

A DOM-style document with indexed nodes that provides a consistent readable view of a document.
To create new IndexedDocument use the utility class IndexedDocProvider.
It's implemented in IndexedDocumentImpl. The document is mutated only by ops using the method consume(DocOp op) 


MutableDocument 
---------------

Is a: ReadeableWDocument (by delegation in a IndexedDocument)


Implemented in:  MutableDocumentImpl <- DocumentImpl


MutableDocuments are the object providing methods to change the document. In the main implementation class 
(MutableDocumentImpl) operations are translated into ops.They are consumed by an operation sequencer (or sink)

The readable view of the document is delegated to a IndexedDocument. 


OperationSequencer
------------------

It is responsible to pass ops generated by the MutableDocument to the IndexedDocument, 
getting the equivalent set of invertible ops. Then, these ops are send to the output sink.


PluggableMutableDocument
------------------------

This class plugs all necessary components to work with live Documents locally: 


Processing for Document's local changes
---------------------------------------

- A method to mutate a document is invoked in a PluggableMutableDocument instance or in a delegated
  MutableDocument instance, e.g. setAnotation(...)

- The MutableDocument implementation translate the method semantinc into ops and they are passed to the 
  OperationSequencer by the method consume()

- The sequencer has been provided by the PluggableMutableDocument. First, it passes the ops to the IndexedDocument  
  to get them applied and transformed in a invertible ops. Second, this invertible ops are send to the output sink.

- All readings are performed against the IndexedDocument.





Delivering deltas from server to local wavelet
----------------------------------------------




 
                                ServerConnectionListener
                          .onServerDelta(TransformedWaveletDelta)                             ConnectionListener.onOperationReceived() 
        OperationChannel  ---------------------------------------------->  ConcurrencyControl -------------------------------------------------
 as WaveletDeltaChannel.Receiver.                                  ConcurrencyControl.peek()/receive():
onDelta(TransformedWaveletDelta)                                         WaveletOperation




                 (Forward notification)
               OperationChannel.Listener
              .onOperationReceived()                    FlushingOperationSink.consume(WaveletOperation)                 
-------> OperationChannel --------------------------------------> OperationSucker ---------------------------------------------------------
                            OperationChannel.peek()/       (is a OperationChannel.Listener)
                            .receive(): WaveletOperation



                                               WaveletOperation
                                                  .apply(CcBasedWavelet.ObservableWaveletData)
------->   .OperationApplier  --------------------------------------------------------> [Apply WaveletOperation to a Wavelet]
          (is a FlushingOperationSink)  







Sending daltas from local Wavelet to server
-------------------------------------------


                                                                         Transform deltas & queue
  OperationalChannel -------------------------->  ConcurrencyControl  --------------------------->  ConcurrencyControl ----------
send(WaveletOperation[])                 onClientOperations(WaveletOperation[])                   sendDelta(WaveletDelta)


------------> ServerConnection ------------------------> WaveletDeltaChannel
       sendDelta(WaveletDelta)                        send(Transmitter)
              (Implemented in 
          OperationalChannelImpl)




Channels & Concurrency Control
------------------------------


OperationChannel
----------------


 A client socket for a wavelet. Sends/receives operations to/from the wave
 server and transforms (outbound) client operations against (inbound) server
 operations.
 
 An operation channel can operate without network connection to the server by
 queuing outbound operations until a network connection is established at a
 later time.
 
 If the network connection fails during operation, or the wave server restarts
 or fails over, a channel will silently try to reconnect and recover (by
 selectively retransforming and retransmitting relevant client operations) but
 will notify if recovery fails.
 


OperationChannelImpl
--------------------

                          ConcurrencyControl                  
                               |      |
            onServerDelta()    |      | 
            ClientOperations() |      |
                               |      |
                               A      V
                               |      |
                               |      |
                               |      |
  ConnectionListener (in) >-----      ---> ServerConnection (out)
            A                                      |
            |                                      |  
            |                                      |
            |                                      |  
            |           CcBasedWavelet             |
            |                 |                    |
            |         send(WaveletOperation)       | 
            |                 |                    | 
            |                 V                    |
            ---------< OperationChannel <----------
                              A
                              |
                              | WaveletDeltaChannel.Receiver
                              | WaveletDeltaChannel.Trasmitter
                              |
                              V
                     WaveletDeltaChannel
              
          
The operation channel implementation mediates between a WaveletDeltaChannel
and client ConcurrencyControl. It sends operations via concurrency control in
deltas through a wavelet delta channel, and accepts deltas from the the delta
channel as broadcast from the server. Ops are transformed and queued in the
ConcurrencyControl class.

The delta channel is connected through a raw wavelet channel.

The channel allows reconnection when after some failures by providing
reconnection versions and reconciling concurrency control state
with the server's state. Recovery can fail when more than one client modifies
the wave, and the wave server crashes losing history about the order of
deltas accepted.


Applying WaveletOperation's to a Wavelet Document
-------------------------------------------------



A wavelet operation occurs in a
{@link WaveletOperationContext}, and applies to a {@link WaveletData}.

Wavelet operations are also {@link Visitable} for the purpose of extracting serialization
and merge logic into separate classes.

Operations are partitioned into wavelet operations, blip operations, and document operations, in
order to reduce the number of operation pairs that must be considered for transform and merge
(it only makes sense to transform or merge operations that apply to the same type).  The boxing
relationships where document ops are boxed as a blip operation, which in turn is boxed as a
wavelet operation, are as follows:
                                       Operation<T>
                                            A
        ____________________________________|______________________________________
       |                                    |                                      |
  WaveletOperation                 --- BlipOperation                    --- DocumentOperation
       A                           |        A                           |          A
   ____|__________                 |    ____|___________                |    ______|______
  |    |          |                |   |    |           |               |   |             |
 ...  ...  WaveletBlipOperation <>--  ...  ...  BlipContentOperation <>--  ... (XML ops) ...



When a Wavelet operation comes to the CcBasedWavelet.OperationApplier, the operation's apply() method is invoked passing the WaveletedData object.
Enventually, a BlipContentOperation.apply() will call the BlipData.getContent().consume(DocOp).


BlipData.getContent() is a DocumentOperationSink which is implemented actually by the PluggableMutableDocument, so it is passing the ops to the IndexedDocument.





OpBasedXXX Hierarchy 
------------------------------------

They are the implementation classes behind the Wavelet/ObservableWavelet, Blip and Document (MutableDocument) types.



The collaborative structure of the sinks in a set of wave, blip and document adapters is as
follows:

                                document
:OpBasedDocument - - - - - - > :DocumentOperationSink
          |
          V outputSink
          0 fromDocument
          |                      blip
  :OpBasedBlip - - - - - - - > :BlipData
          |
          V outputSink
          0 fromBlip
          |                      wave
  :OpBasedWavelet  - - - - - - - > :WaveletData
          |
          V
          0 outputSink
          |
          V (outgoing client ops)
 
where  -0 x  represents a sink called x
      ---->  represents flow of operations
      - - >  represents operation application, either full (apply()) or partial (update()).


The operation sinks associated with the OpBasedXXX are only for applying and passing around
locally-sourced operations.  The structure of each OpBasedXXX is as follows.   Each OpBasedXXX
<em>is</em> sink for operations it produces directly.  These operations are applied to the
adapted target, then sent to an output sink:


  self.consume(op) =
    op.apply(target);
    outputSink.consume(op);


Each OpBasedXXX with sub-OpBasedXXX has a sink for operations produced by those sub-OpBasedXXX
(fromDocument and fromBlip).  Operations received through such a sink are boxed, partially
applied to the target (just the update() method, since the sub-operation has already been applied
to the sub-component), then sent down to the output sink.


  fromSub.consume(op) =
    op' = box(op);
    op'.update(target);
    outputSink.consume(op');


Note that operations arriving from elsewhere are applied top-down through the WaveletData
implementation, and do not flow through these adapters.  The collaboration between the adapters
appears as follows:




Handling Documents for the text editor
---------------------------------------





